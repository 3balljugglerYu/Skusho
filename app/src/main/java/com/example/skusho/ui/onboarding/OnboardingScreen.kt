package com.example.skusho.ui.onboarding

import android.Manifest
import android.content.Intent
import android.net.Uri
import android.os.Build
import android.provider.Settings
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.google.accompanist.permissions.ExperimentalPermissionsApi
import com.google.accompanist.permissions.isGranted
import com.google.accompanist.permissions.rememberPermissionState
import kotlinx.coroutines.launch

/**
 * MIUIÁ´ØÊú´„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö
 */
private fun isMIUI(): Boolean {
    return Build.MANUFACTURER.equals("Xiaomi", ignoreCase = true) ||
           Build.BRAND.equals("Xiaomi", ignoreCase = true) ||
           !Build.getRadioVersion().isNullOrEmpty() && Build.getRadioVersion().contains("MIUI")
}

private val PrimaryBlue = Color(0xFF1565C0)
private val SecondaryBlue = Color(0xFF0D47A1)
private val AccentBlue = Color(0xFF1E88E5)
private val PaleBlue = Color(0xFFE3F2FD)
private val SoftBlue = Color(0xFFF6F9FF)
private val MutedText = Color(0xFF5C6F82)
private val WarningContainer = Color(0xFFFFE9E9)
private val WarningContent = Color(0xFFB3261E)

private val OutlineButtonBorder = BorderStroke(1.dp, SecondaryBlue.copy(alpha = 0.5f))

@Composable
private fun primaryButtonColors() = ButtonDefaults.buttonColors(
    containerColor = AccentBlue,
    contentColor = Color.White,
    disabledContainerColor = AccentBlue.copy(alpha = 0.3f),
    disabledContentColor = Color.White.copy(alpha = 0.7f)
)

@Composable
private fun secondaryButtonColors() = ButtonDefaults.buttonColors(
    containerColor = SecondaryBlue,
    contentColor = Color.White
)

@Composable
private fun outlineButtonColors() = ButtonDefaults.outlinedButtonColors(
    contentColor = SecondaryBlue
)

@OptIn(ExperimentalFoundationApi::class, ExperimentalPermissionsApi::class)
@Composable
fun OnboardingScreen(
    onComplete: () -> Unit
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    
    // Ê®©ÈôêÁä∂ÊÖã
    var hasOverlayPermission by remember { mutableStateOf(Settings.canDrawOverlays(context)) }
    val notificationPermissionState = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
        rememberPermissionState(Manifest.permission.POST_NOTIFICATIONS)
    } else null
    
    // Ë°®Á§∫„Åô„Çã„Éö„Éº„Ç∏„ÇíÊ±∫ÂÆö
    val isMiuiDevice = isMIUI()
    val pages = buildList {
        add(OnboardingPage.Welcome)
        
        // MIUIÁ´ØÊú´„ÅÆÂ†¥Âêà„ÅØMIUIÊ®©ÈôêË®≠ÂÆö„Åß‰∏ÄÊã¨Ë®≠ÂÆö„Åô„Çã„Åü„ÇÅ„ÄÅ„Ç™„Éº„Éê„Éº„É¨„Ç§Ê®©Èôê„Éö„Éº„Ç∏„ÅØ‰∏çË¶Å
        if (!isMiuiDevice) {
            add(OnboardingPage.OverlayPermission)
        }
        
        // MIUIÁ´ØÊú´„ÅÆÂ†¥Âêà„ÅØ„ÄÅÊúÄÈáçË¶Å„ÅÆMIUIÊ®©Èôê„ÇíÂÖà„Å´Ë®≠ÂÆö
        if (isMiuiDevice) {
            add(OnboardingPage.MIUIPermission)
        }
        
        // ÈÄöÁü•Ê®©Èôê„ÅØË£úÂä©ÁöÑ„Å™Ê©üËÉΩ„Å™„ÅÆ„ÅßÂæå„Å´ÈÖçÁΩÆ
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            add(OnboardingPage.NotificationPermission)
        }
        
        add(OnboardingPage.Ready)
    }
    
    val pagerState = rememberPagerState(pageCount = { pages.size })
    
    // Ê®©ÈôêÁä∂ÊÖã„ÇíÁõ£Ë¶ñ
    LaunchedEffect(Unit) {
        hasOverlayPermission = Settings.canDrawOverlays(context)
    }
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        // „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ
        HorizontalPager(
            state = pagerState,
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth()
        ) { pageIndex ->
            when (pages[pageIndex]) {
                OnboardingPage.Welcome -> WelcomePage()
                OnboardingPage.OverlayPermission -> OverlayPermissionPage(
                    hasPermission = hasOverlayPermission,
                    onRequestPermission = {
                        val intent = Intent(
                            Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                            Uri.parse("package:${context.packageName}")
                        )
                        context.startActivity(intent)
                    },
                    onCheckPermission = {
                        hasOverlayPermission = Settings.canDrawOverlays(context)
                    }
                )
                OnboardingPage.NotificationPermission -> NotificationPermissionPage(
                    permissionState = notificationPermissionState
                )
                OnboardingPage.MIUIPermission -> MIUIPermissionPage(
                    hasPermission = hasOverlayPermission,
                    onCheckPermission = {
                        hasOverlayPermission = Settings.canDrawOverlays(context)
                    }
                )
                OnboardingPage.Ready -> ReadyPage()
            }
        }
        
        // „Éö„Éº„Ç∏„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            repeat(pages.size) { index ->
                Box(
                    modifier = Modifier
                        .padding(4.dp)
                        .size(if (index == pagerState.currentPage) 12.dp else 8.dp)
                        .clip(CircleShape)
                        .background(
                            if (index == pagerState.currentPage)
                                AccentBlue
                            else
                                SoftBlue
                        )
                )
            }
        }
        
        // „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Éú„Çø„É≥
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            // Ââç„Å∏„Éú„Çø„É≥
            if (pagerState.currentPage > 0) {
                OutlinedButton(
                    onClick = {
                        scope.launch {
                            pagerState.animateScrollToPage(pagerState.currentPage - 1)
                        }
                    },
                    colors = outlineButtonColors(),
                    border = OutlineButtonBorder
                ) {
                    Text("Ââç„Å∏")
                }
            } else {
                Spacer(modifier = Modifier.size(0.dp))
            }
            
            // Ê¨°„Å∏ / ÂÆå‰∫Ü„Éú„Çø„É≥
            if (pagerState.currentPage < pages.size - 1) {
                // ÁèæÂú®„ÅÆ„Éö„Éº„Ç∏„ÅÆÊ®©ÈôêÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
                val canProceed = when (pages[pagerState.currentPage]) {
                    OnboardingPage.OverlayPermission -> hasOverlayPermission
                    OnboardingPage.NotificationPermission -> notificationPermissionState?.status?.isGranted ?: true
                    OnboardingPage.MIUIPermission -> hasOverlayPermission
                    else -> true // „Çà„ÅÜ„Åì„Åù„Éö„Éº„Ç∏„Å®Ê∫ñÂÇôÂÆå‰∫Ü„Éö„Éº„Ç∏„ÅØÂ∏∏„Å´ÈÄ≤„ÇÅ„Çã
                }
                
                Button(
                    onClick = {
                        scope.launch {
                            pagerState.animateScrollToPage(pagerState.currentPage + 1)
                        }
                    },
                    enabled = canProceed,
                    colors = primaryButtonColors()
                ) {
                    Text("Ê¨°„Å∏")
                }
            } else {
                Button(
                    onClick = onComplete,
                    colors = primaryButtonColors()
                ) {
                    Text("ÈñãÂßã")
                }
            }
        }
    }
}

// „Éö„Éº„Ç∏„ÅÆÁ®ÆÈ°û„ÇíÂÆöÁæ©
private enum class OnboardingPage {
    Welcome,
    OverlayPermission,
    NotificationPermission,
    MIUIPermission,
    Ready
}

@Composable
private fun WelcomePage() {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "üì∏",
            style = MaterialTheme.typography.displayLarge
        )
        Spacer(modifier = Modifier.height(24.dp))
        Text(
            text = "Skusho „Å∏„Çà„ÅÜ„Åì„Åù",
            style = MaterialTheme.typography.headlineLarge,
            color = PrimaryBlue,
            textAlign = TextAlign.Center
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text(
            text = "ÁîªÈù¢Á´Ø„ÅÆÊíÆÂΩ±„Éú„Çø„É≥„Çí„Çø„ÉÉ„Éó„Åô„Çã„Å†„Åë„Åß\n„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„ÇíÊíÆÂΩ±„Åß„Åç„Åæ„Åô",
            style = MaterialTheme.typography.bodyLarge,
            textAlign = TextAlign.Center,
            color = MutedText
        )
        Spacer(modifier = Modifier.height(32.dp))
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = PaleBlue,
                contentColor = SecondaryBlue
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = "‚ú® ‰∏ª„Å™Ê©üËÉΩ",
                    style = MaterialTheme.typography.titleMedium,
                    color = SecondaryBlue
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "‚Ä¢ ‰ªñ„ÅÆ„Ç¢„Éó„É™„Çí‰ΩøÁî®‰∏≠„Åß„ÇÇÊíÆÂΩ±ÂèØËÉΩ\n‚Ä¢ „Éâ„É©„ÉÉ„Ç∞ÂèØËÉΩ„Å™ÊíÆÂΩ±„Éú„Çø„É≥\n‚Ä¢ Ëá™ÂãïÁöÑ„Å´„ÇÆ„É£„É©„É™„Éº„Å´‰øùÂ≠ò",
                    style = MaterialTheme.typography.bodyMedium,
                    color = SecondaryBlue.copy(alpha = 0.85f)
                )
            }
        }
    }
}

@Composable
private fun OverlayPermissionPage(
    hasPermission: Boolean,
    onRequestPermission: () -> Unit,
    onCheckPermission: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "üéØ",
            style = MaterialTheme.typography.displayLarge
        )
        Spacer(modifier = Modifier.height(24.dp))
        Text(
            text = "ÁîªÈù¢„Ç™„Éº„Éê„Éº„É¨„Ç§Ê®©Èôê",
            style = MaterialTheme.typography.headlineMedium,
            color = PrimaryBlue,
            textAlign = TextAlign.Center
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text(
            text = "ÊíÆÂΩ±„Éú„Çø„É≥„ÇíË°®Á§∫„Åô„Çã„Åü„ÇÅ„Å´\n„Äå‰ªñ„ÅÆ„Ç¢„Éó„É™„ÅÆ‰∏ä„Å´Èáç„Å≠„Å¶Ë°®Á§∫„Äç„ÅÆÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô",
            style = MaterialTheme.typography.bodyLarge,
            textAlign = TextAlign.Center,
            color = MutedText
        )
        Spacer(modifier = Modifier.height(32.dp))
        
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = if (hasPermission) PaleBlue else WarningContainer,
                contentColor = if (hasPermission) SecondaryBlue else WarningContent
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = if (hasPermission) "‚úÖ Ê®©Èôê„ÅåË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô" else "‚ö†Ô∏è Ê®©Èôê„ÅåÂøÖË¶Å„Åß„Åô",
                    style = MaterialTheme.typography.titleMedium,
                    color = if (hasPermission) SecondaryBlue else WarningContent
                )
                if (!hasPermission) {
                    Spacer(modifier = Modifier.height(16.dp))
                    Button(
                        onClick = onRequestPermission,
                        colors = primaryButtonColors()
                    ) {
                        Text("Ê®©Èôê„ÇíË®±ÂèØ")
                    }
                    Spacer(modifier = Modifier.height(8.dp))
                    OutlinedButton(
                        onClick = onCheckPermission,
                        colors = outlineButtonColors(),
                        border = OutlineButtonBorder
                    ) {
                        Text("Ê®©ÈôêÁä∂ÊÖã„ÇíÂÜçÁ¢∫Ë™ç")
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalPermissionsApi::class)
@Composable
private fun NotificationPermissionPage(
    permissionState: com.google.accompanist.permissions.PermissionState?
) {
    val hasPermission = permissionState?.status?.isGranted ?: true
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "üîî",
            style = MaterialTheme.typography.displayLarge
        )
        Spacer(modifier = Modifier.height(24.dp))
        Text(
            text = "ÈÄöÁü•Ê®©Èôê",
            style = MaterialTheme.typography.headlineMedium,
            color = PrimaryBlue,
            textAlign = TextAlign.Center
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text(
            text = "„Çµ„Éº„Éì„Çπ„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç„Å®ÂÅúÊ≠¢„Éú„Çø„É≥„Çí\nÈÄöÁü•„Éê„Éº„Å´Ë°®Á§∫„Åô„Çã„Åü„ÇÅ„Å´ÂøÖË¶Å„Åß„Åô",
            style = MaterialTheme.typography.bodyLarge,
            textAlign = TextAlign.Center,
            color = MutedText
        )
        Spacer(modifier = Modifier.height(32.dp))
        
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = if (hasPermission) PaleBlue else WarningContainer,
                contentColor = if (hasPermission) SecondaryBlue else WarningContent
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = if (hasPermission) "‚úÖ Ê®©Èôê„ÅåË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô" else "‚ö†Ô∏è Ê®©Èôê„ÅåÂøÖË¶Å„Åß„Åô",
                    style = MaterialTheme.typography.titleMedium,
                    color = if (hasPermission) SecondaryBlue else WarningContent
                )
                if (!hasPermission && permissionState != null) {
                    Spacer(modifier = Modifier.height(16.dp))
                    Button(
                        onClick = { permissionState.launchPermissionRequest() },
                        colors = primaryButtonColors()
                    ) {
                        Text("Ê®©Èôê„ÇíË®±ÂèØ")
                    }
                }
            }
        }
    }
}

@Composable
private fun MIUIPermissionPage(
    hasPermission: Boolean,
    onCheckPermission: () -> Unit
) {
    val context = LocalContext.current
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "‚öôÔ∏è",
            style = MaterialTheme.typography.displayLarge
        )
        Spacer(modifier = Modifier.height(24.dp))
        Text(
            text = "MIUI Ê®©ÈôêË®≠ÂÆö",
            style = MaterialTheme.typography.headlineMedium,
            color = PrimaryBlue,
            textAlign = TextAlign.Center
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text(
            text = "MIUIÁ´ØÊú´„Åß„ÅØÂ∞ÇÁî®„ÅÆÊ®©ÈôêË®≠ÂÆö„ÅåÂøÖË¶Å„Åß„Åô\nÔºà„Ç™„Éº„Éê„Éº„É¨„Ç§Ê®©Èôê„ÇíÂê´„ÇÄÔºâ",
            style = MaterialTheme.typography.bodyLarge,
            textAlign = TextAlign.Center,
            color = MutedText
        )
        Spacer(modifier = Modifier.height(32.dp))
        
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = if (hasPermission) PaleBlue else SoftBlue,
                contentColor = SecondaryBlue
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                if (hasPermission) {
                    Text(
                        text = "‚úÖ Ê®©Èôê„ÅåË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô",
                        style = MaterialTheme.typography.titleMedium,
                        color = SecondaryBlue
                    )
                } else {
                    Text(
                        text = "ÊíÆÂΩ±„Éú„Çø„É≥„ÅÆË°®Á§∫„Å´ÂøÖË¶Å„Å™Ê®©ÈôêÔºö",
                        style = MaterialTheme.typography.titleMedium,
                        color = SecondaryBlue
                    )
                    Spacer(modifier = Modifier.height(12.dp))
                    Text(
                        text = "‚úÖ „Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÂÆüË°å‰∏≠„Å´Êñ∞„Åó„ÅÑ„Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÈñã„Åè\n‚úÖ „Éù„ÉÉ„Éó„Ç¢„ÉÉ„Éó„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆË°®Á§∫",
                        style = MaterialTheme.typography.bodyMedium,
                        color = SecondaryBlue.copy(alpha = 0.9f)
                    )
                    Spacer(modifier = Modifier.height(12.dp))
                    Text(
                        text = "‚ö†Ô∏è „Åì„ÅÆ2„Å§„ÇíË®±ÂèØ„Åô„Çã„Åì„Å®„Åß„ÄÅ„Ç™„Éº„Éê„Éº„É¨„Ç§Ê®©Èôê„ÇÇÊúâÂäπ„Å´„Å™„Çä„Åæ„Åô",
                        style = MaterialTheme.typography.bodySmall,
                        color = SecondaryBlue.copy(alpha = 0.75f)
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "‚Äª ‰ªñ„ÅÆÈ†ÖÁõÆÔºà„Éõ„Éº„É†ÁîªÈù¢„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„ÄÅ„É≠„ÉÉ„ÇØÁîªÈù¢„Å´Ë°®Á§∫Ôºâ„ÅØ‰∏çË¶Å„Åß„Åô",
                        style = MaterialTheme.typography.bodySmall,
                        color = SecondaryBlue.copy(alpha = 0.75f)
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                    Button(
                        onClick = {
                            try {
                                val intent = Intent("miui.intent.action.APP_PERM_EDITOR").apply {
                                    setClassName("com.miui.securitycenter",
                                        "com.miui.permcenter.permissions.PermissionsEditorActivity")
                                    putExtra("extra_pkgname", context.packageName)
                                }
                                context.startActivity(intent)
                            } catch (e: Exception) {
                                val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                                    data = Uri.parse("package:${context.packageName}")
                                }
                                context.startActivity(intent)
                            }
                        },
                        modifier = Modifier.fillMaxWidth(),
                        colors = secondaryButtonColors()
                    ) {
                        Text("MIUIÊ®©ÈôêË®≠ÂÆö„ÇíÈñã„Åè")
                    }
                    Spacer(modifier = Modifier.height(8.dp))
                    OutlinedButton(
                        onClick = onCheckPermission,
                        modifier = Modifier.fillMaxWidth(),
                        colors = outlineButtonColors(),
                        border = OutlineButtonBorder
                    ) {
                        Text("Ê®©ÈôêÁä∂ÊÖã„ÇíÂÜçÁ¢∫Ë™ç")
                    }
                }
            }
        }
    }
}

@Composable
private fun ReadyPage() {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "üéâ",
            style = MaterialTheme.typography.displayLarge
        )
        Spacer(modifier = Modifier.height(24.dp))
        Text(
            text = "Ê∫ñÂÇôÂÆå‰∫ÜÔºÅ",
            style = MaterialTheme.typography.headlineLarge,
            color = PrimaryBlue,
            textAlign = TextAlign.Center
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text(
            text = "Ë®≠ÂÆö„ÅØ‰ª•‰∏ä„Åß„Åô„ÄÇ\n„ÄåÈñãÂßã„Äç„Éú„Çø„É≥„Çí„Çø„ÉÉ„Éó„Åó„Å¶\n„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„ÉàÊíÆÂΩ±„ÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜÔºÅ",
            style = MaterialTheme.typography.bodyLarge,
            textAlign = TextAlign.Center,
            color = MutedText
        )
        Spacer(modifier = Modifier.height(32.dp))
        
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = SoftBlue,
                contentColor = SecondaryBlue
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = "üìù ‰Ωø„ÅÑÊñπ",
                    style = MaterialTheme.typography.titleMedium,
                    color = SecondaryBlue
                )
                Spacer(modifier = Modifier.height(12.dp))
                Text(
                    text = "1. „ÄåÊíÆÂΩ±ÈñãÂßã„Äç„Çí„Çø„ÉÉ„Éó\n2. ÁîªÈù¢„Ç≠„É£„Éó„ÉÅ„É£„ÅÆË®±ÂèØ„ÇíÊâøË™ç\n3. ÊíÆÂΩ±„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô\n4. ÊíÆÂΩ±„Åó„Åü„ÅÑÁîªÈù¢„Åß„Éú„Çø„É≥„Çí„Çø„ÉÉ„ÉóÔºÅ",
                    style = MaterialTheme.typography.bodyMedium,
                    color = SecondaryBlue.copy(alpha = 0.85f)
                )
            }
        }
    }
}
